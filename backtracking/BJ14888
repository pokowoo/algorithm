import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.StringTokenizer;

public class BJ14888 {
    static int N;
    static int[] numbers;
    static int[] operators = new int[4]; // {+, -, *, /} 순서
    static int maxResult = Integer.MIN_VALUE;
    static int minResult = Integer.MAX_VALUE;

    // 백트래킹 메서드
    static void dfs(int index, int current) {
        if (index == N) { // 모든 숫자를 사용했을 때
            maxResult = Math.max(maxResult, current);
            minResult = Math.min(minResult, current);
            return;
        }

        // 각 연산자에 대해 시도
        for (int i = 0; i < 4; i++) {
            if (operators[i] > 0) { // 사용할 연산자가 남아 있는 경우
                operators[i]--; // 연산자 사용
                switch (i) {
                    case 0: // 덧셈
                        dfs(index + 1, current + numbers[index]);
                        break;
                    case 1: // 뺄셈
                        dfs(index + 1, current - numbers[index]);
                        break;
                    case 2: // 곱셈
                        dfs(index + 1, current * numbers[index]);
                        break;
                    case 3: // 나눗셈
                        dfs(index + 1, current / numbers[index]);
                        break;
                }
                operators[i]++; // 연산자 복구
            }
        }
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        // 입력 처리
        N = Integer.parseInt(br.readLine());
        numbers = new int[N];

        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < N; i++) {
            numbers[i] = Integer.parseInt(st.nextToken());
        }

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < 4; i++) {
            operators[i] = Integer.parseInt(st.nextToken());
        }

        // 백트래킹 시작
        dfs(1, numbers[0]);

        // 결과 출력
        System.out.println(maxResult);
        System.out.println(minResult);
    }
}
